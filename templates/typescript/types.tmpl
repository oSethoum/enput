{{ $g := . }}

type OrderDirection = "ASC" | "DESC";
{{ range $s := .Schemas }}

export interface {{ pascal .Name }} {
    {{ range .Fields }}
    {{ if gt (len .Comment) 0 -}}
    /** {{ .Comment }} */
    {{ end -}}
        {{ .Name }}{{- if or .Optional .Nillable }}?{{- end}}: {{ .Types.Ts }};
    {{- end}}
    {{- $ed := len .Edges }}
    {{- if gt $ed 0 }}
    edges:{
    {{- range .Edges }}
        {{ case .Name }}?: {{ pascal .Type }} {{- if not .Unique}}[]{{- end}};
    {{- end}}
    }
    {{- end}}
}

export interface {{ pascal .Name }}CreateInput{
    {{ range .Fields }}
    {{ if gt (len .Comment) 0 -}} 
    /** {{ .Comment }} */
    {{ end -}}
    {{- if and ( .EdgeField ) ( not .Optional ) -}} 
        /** Required Edge Field */
        {{ case .Name }}?: {{ .Types.Ts }} | null;
    {{ else }}
        {{ case .Name }}{{- if or .Optional .Nillable .HasDefault }}?{{- end}}: {{ .Types.Ts }} {{- if or .Optional .Nillable .HasDefault }}| null{{- end}};
    {{ end -}}
    {{ end -}}
    {{ range .Edges -}}
        {{ if gt (len .Comment) 0 -}} 
        /** {{ .Comment }} */
        {{ end -}}
        {{- if not .EdgeField  -}}
            {{ if .Unique -}}
                {{ case ( printf "%sId" (pascal .Name) ) }}{{- if .Optional }}?{{- end}}: {{ $g.Config.IDType }} {{- if .Optional }}| null{{- end}};
            {{ else -}}
                {{ case ( printf "add%sIds" (pascal .Name) ) }}?: {{ $g.Config.IDType }}[];
            {{ end  -}}
        {{ end -}}
    {{ end }}
    {{ if $g.Config.WithNestedMutations }} 
        {{ if gt ( len .Edges) 0 }} 
        {{ case "CreateEdges" }}?: {{ pascal .Name }}CreateEdges;
        {{ end }}
    {{ end -}}
}

 {{ if $g.Config.WithNestedMutations }} 
{{ if gt ( len .Edges) 0 }} 
export interface {{ pascal .Name }}CreateEdges {
    {{ range .Edges -}}
        {{ if .Unique -}}
            {{- if not .Optional}}
            /** Required Edge */
            {{- end }}
            {{ case .Name }}?: {{ pascal .Type }}CreateInput;
        {{ end  -}}
    {{ end }}
}
{{ end }}
{{ end -}}

export interface {{ pascal .Name }}UpdateInput{
    {{ range .Fields -}}
        {{ if gt (len .Comment) 0 -}} 
        /** {{ .Comment }} */
        {{ end -}}
        {{ case .Name }}{{ if and ( not .Slice ) ( not ( eq .Name "id" ) ) }}?{{ end -}}: {{ .Types.Ts }};
    {{ end -}}
    {{ range .Edges -}}
        {{ if gt (len .Comment) 0 -}} 
        /** {{ .Comment }} */
        {{ end -}}
        {{- if not .EdgeField -}}
            {{ if .Unique -}}
                {{ case ( printf "%sId" (pascal .Name) ) }}?: {{ $g.Config.IDType }};
            {{ else -}}
                {{ case ( printf "add%sIds" (pascal .Name) ) }}?: {{ $g.Config.IDType }}[];
                {{ case ( printf "remove%sIds" (pascal .Name) ) }}?: {{ $g.Config.IDType }}[];
                {{ case ( printf "clear%s" (pascal .Name) ) }}?: boolean;
            {{ end -}}
        {{ end -}}
    {{ end -}}
    {{ if $g.Config.WithNestedMutations }} 
        {{ if gt ( len .Edges) 0 }} 
        {{ case "UpdateEdges" }}?: {{ pascal .Name }}UpdateEdges;
        {{ end }}
    {{ end -}}
}

{{ if $g.Config.WithNestedMutations }} 
{{ if gt ( len .Edges) 0 }} 
export interface {{ pascal .Name }}UpdateEdges {
    {{ range .Edges -}}
        {{ if .Unique -}}
            {{ case .Name }}?: {{ pascal .Type }}UpdateInput;
        {{ end  -}}
    {{ end }}
}
{{ end }}
{{ end -}}

type {{ pascal .Name }}OrderField = {{ order_fields . }}
type {{ pascal .Name }}SelectField = {{ select_fields . }}

export interface {{ pascal .Name }}Order {
    field: {{ pascal .Name }}OrderField;
    direction?: OrderDirection;
}

export interface {{ pascal .Name }}QueryInput {
    select?: {{ pascal .Name }}SelectField[];
    offset?: number;
    limit?: number;
    where?: {{ pascal .Name }}WhereInput;
    order?: {{ pascal .Name }}Order[];
    {{ range .Edges -}}
    {{ case (printf "with%s" ( pascal .Name )) }}?: {{ pascal .Type }}QueryInput;
    {{ with .Through }} 
    {{ case (printf "with%s" ( pascal .Name )) }}?: {{ pascal .Type }}QueryInput;
    {{ end -}}
    {{ end -}}
}

export interface {{ pascal .Name }}WhereInput {
    not?: {{ pascal .Name }}WhereInput;  
    or?: {{ pascal .Name }}WhereInput[];
    and?: {{ pascal .Name }}WhereInput[];
    
    {{- range .Fields }}
        {{- if gt (len .Enums) 0 -}}
            {{ case .Name }}_EQ?:  {{ .Types.Ts }};
            {{ case .Name }}_NEQ?: {{ .Types.Ts }};
            {{ case .Name }}_In?: ({{ .Types.Ts }})[];
            {{ case .Name }}_NotIn?: ({{ .Types.Ts }})[];
        {{- end -}}
        {{- if .Types.Ts | eq "boolean" }}
            {{ case .Name }}_EQ?:  {{ .Types.Ts }};
            {{ case .Name }}_NEQ?: {{ .Types.Ts }}; 
        {{- end }}
        {{- if is_comparable . }}
            {{ case .Name }}?: {{ .Types.Ts }};
            {{ case .Name }}_NEQ?: {{ .Types.Ts }} 
            {{ case .Name }}_In?: {{ .Types.Ts }}[];
            {{ case .Name }}_NotIn?: {{ .Types.Ts }}[];
            
            {{- if or .Enum .EdgeField | not }}
                {{ case .Name }}_GT?: {{ .Types.Ts }};
                {{ case .Name }}_GTE?: {{ .Types.Ts }};
                {{ case .Name }}_LT?: {{ .Types.Ts }};
                {{ case .Name }}_LTE?: {{ .Types.Ts }};
            {{- end }}
        {{- end }}
        {{- if .Optional }}
            {{ case .Name }}_IsNil?: boolean; 
            {{ case .Name }}_NotNil?: boolean;
        {{- end }}
        {{- if eq .Name "id" | not }}
            {{- if .Types.Ts | eq "string"}}
                {{ case .Name }}_Contains?: string; 
                {{ case .Name }}_HasPrefix?: string; 
                {{ case .Name }}_HasSuffix?: string; 
                {{ case .Name }}_ContainsFold?: string; 
                {{ case .Name }}_EqualFold?: string; 
            {{- end }}
        {{- end }}
    {{- end }}
    {{- range .Edges}}
        // "{{.Name}}" edge predicates.
        {{ case (printf "has%s" (pascal .Name)) }}?: boolean;		               
        {{ case (printf "has%sWith" (pascal .Name)) }}?: {{pascal .Type}}WhereInput;
        {{ with .Through }}
        // "{{.Name}}" edge predicates.
        {{ case (printf "has%s" (pascal .Name)) }}?: boolean;		               
        {{ case (printf "has%sWith" (pascal .Name)) }}?: {{pascal .Type}}WhereInput;
        {{ end -}}
    {{- end}}
}
{{- end }}