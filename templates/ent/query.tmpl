package ent
{{ $g := . }}
import (
    "fmt"
    "strings"
    "errors"
    "{{ $g.Package }}/predicate"
    {{ range .Imports -}}
    "{{ . }}"
    {{ end -}}
    {{- range .Schemas}}
    "{{ $g.Package }}/{{ lower .Name}}"
    {{- end}}
)

type OrderField struct {
	Field     string `json:"field"`
	Direction string `json:"direction"`
}

{{- range $k, $s := .Schemas }}
     type {{ pascal .Name }}QueryInput struct {
        Select []string 					    `json:"select,omitempty"`
	    Offset *int     					    `json:"offset,omitempty"`
	    Limit  *int     					    `json:"limit,omitempty"`
	    Where  *{{ pascal .Name }}WhereInput	`json:"where,omitempty"`
	    Order  []OrderField    				    `json:"order,omitempty"`
	    {{- range .Edges }}
            With{{ pascal .Name }} *{{ pascal .Type }}QueryInput `json:"{{ (printf "with%s,omitempty" (pascal .Name)) | case }}"`
            {{ with .Through }} 
                With{{ pascal .Name }} *{{ pascal .Type }}QueryInput `json:"{{ (printf "with%s,omitempty" (pascal .Name)) | case }}"`
            {{ end -}}
        {{- end }}
    } {{ if $g.Config.WithSwaggerRename }}// @name {{ $s.Name }}QueryInput {{ end }}

    type {{ pascal .Name }}WhereInput struct {
        Not 	*{{ pascal .Name }}WhereInput   `json:"not"`
	    Or  	[]*{{ pascal .Name }}WhereInput `json:"or"`
	    And 	[]*{{ pascal .Name }}WhereInput `json:"and"`

        {{- range .Fields }}
            {{- if gt (len .Enums) 0  }}
            {{ pascal .Name }}EQ     *{{ .Type }}   `json:"{{ case .Name }}_EQ,omitempty"`
            {{ pascal .Name }}NEQ    *{{ .Type }}   `json:"{{ case .Name }}_NEQ,omitempty"`
            {{ pascal .Name }}In     []{{ .Type }}  `json:"{{ case .Name }}_In,omitempty"`
            {{ pascal .Name }}NotIn  []{{ .Type }}  `json:"{{ case .Name }}_NotIn,omitempty"`
            {{- end -}}
            {{- if .Type | eq "bool" }}
                {{ pascal .Name }}EQ  *{{ .Type }}  `json:"{{ case .Name }}_EQ,omitempty"`
                {{ pascal .Name }}NEQ *{{ .Type }}  `json:"{{ case .Name }}_NEQ,omitempty"`
            {{- end }}
            {{- if is_comparable . }}
                {{ pascal .Name }}      *{{ .Type }}  `json:"{{ case .Name }},omitempty"`
                {{ pascal .Name }}NEQ   *{{ .Type }}  `json:"{{ case .Name }}_NEQ,omitempty"`
                {{ pascal .Name }}In    []{{ .Type }} `json:"{{ case .Name }}_In,omitempty"`
                {{ pascal .Name }}NotIn []{{ .Type }} `json:"{{ case .Name }}_NotIn,omitempty"`
                
                {{- if (or .Enum .EdgeField) | not }}
                    {{ pascal .Name }}GT    *{{ .Type }}  `json:"{{ case .Name }}_GT,omitempty"`
                    {{ pascal .Name }}GTE   *{{ .Type }}  `json:"{{ case .Name }}_GTE,omitempty"`
                    {{ pascal .Name }}LT    *{{ .Type }}  `json:"{{ case .Name }}_LT,omitempty"`
                    {{ pascal .Name }}LTE   *{{ .Type }}  `json:"{{ case .Name }}_LTE,omitempty"`
                {{- end }}
            {{- end }}
            {{- if .Optional }}
                {{ pascal .Name }}IsNil    *bool  `json:"{{ case .Name }}_IsNil,omitempty"`
                {{ pascal .Name }}NotNil   *bool  `json:"{{ case .Name }}_NotNil,omitempty"`
            {{- end }}
            {{- if eq .Name "id" | not }}
                {{- if .Type | eq "string"}}
                    {{ pascal .Name }}Contains  	 *string  `json:"{{ case .Name }}_Contains,omitempty"`
                    {{ pascal .Name }}HasPrefix 	 *string  `json:"{{ case .Name }}_HasPrefix,omitempty"`
                    {{ pascal .Name }}HasSuffix 	 *string  `json:"{{ case .Name }}_HasSuffix,omitempty"`
                    {{ pascal .Name }}ContainsFold   *string  `json:"{{ case .Name }}_ContainsFold,omitempty"`
                    {{ pascal .Name }}EqualFold      *string  `json:"{{ case .Name }}_EqualsFold,omitempty"`
                {{- end }}
            {{- end }}
        {{- end }}
        {{- range .Edges}}
            // "{{.Name}}" edge predicates.
            Has{{pascal .Name}} 		*bool		                `json:"{{ case (printf "has%s,omitempty" (pascal .Name)) }}"`
            Has{{pascal .Name}}With     *{{pascal .Type}}WhereInput `json:"{{ case (printf "has%sWith,omitempty" (pascal .Name)) }}"`
            {{ with .Through -}} 
                Has{{pascal .N}}      *bool `json:"{{ case (printf "has%s,omitempty" (pascal .N)) }}"`
                Has{{pascal .N}}With  *{{pascal .T}}WhereInput `json:"{{ case (printf "has%sWith,omitempty" (pascal .T)) }}"`
            {{ end -}}
        {{- end -}}
    } {{ if $g.Config.WithSwaggerRename }}// @name {{ $s.Name }}WhereInput {{ end }}

    var  ErrEmpty{{ .Name }}WhereInput = errors.New("ent: empty {{ pascal .Name }}WhereInput")

    func (i *{{ pascal .Name }}WhereInput) P() (predicate.{{ pascal .Name }}, error) {
        var predicates []predicate.{{ pascal .Name }}
        if i.Not != nil {
            p, err := i.Not.P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'not'", err)
            }
            predicates = append(predicates, {{ lower .Name }}.Not(p))
	    }

        switch n := len(i.Or); {
        case n == 1:
            p, err := i.Or[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'or'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            or := make([]predicate.{{ pascal .Name }}, 0, n)
            for _, w := range i.Or {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'or'", err)
                }
                or = append(or, p)
            }
            predicates = append(predicates, {{ lower .Name }}.Or(or...))
        }

        switch n := len(i.And); {
        case n == 1:
            p, err := i.And[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'and'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            and := make([]predicate.{{ pascal .Name }}, 0, n)
            for _, w := range i.And {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'and'", err)
                }
                and = append(and, p)
            }
            predicates = append(predicates, {{ lower .Name }}.And(and...))
        }

        {{ range .Fields }}
            {{- if gt (len .Enums) 0  }}
            if v := i.{{ pascal .Name }}EQ; v != nil {
			    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}EQ(*v))
		    }
            if v := i.{{ pascal .Name }}NEQ; v != nil {
			    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NEQ(*v))
		    }
            if v := i.{{ pascal .Name }}In; len(v) > 0 {
                predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}In(v...))
            } 
            if v := i.{{ pascal .Name }}NotIn; len(v) > 0 {
                predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NotIn(v...))
            }
            {{- end -}}

            // "{{case .Name}}" field predicates.
            {{- if .Type | eq "bool" }}
            if v := i.{{ pascal .Name }}EQ; v != nil {
			    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}EQ(*v))
		    }
            if v := i.{{ pascal .Name }}NEQ; v != nil {
                predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NEQ(*v))
            }
            {{- end }}
            {{- if is_comparable . }}
                if v := i.{{ pascal .Name }}; v != nil {
                predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}EQ(*v))
                } 
                if v := i.{{ pascal .Name }}NEQ; v != nil {
                    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NEQ(*v))
                } 
                if v := i.{{ pascal .Name }}In; len(v) > 0 {
                    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}In(v...))
                } 
                if v := i.{{ pascal .Name }}NotIn; len(v) > 0 {
                    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NotIn(v...))
                }

                {{- if (or .Enum .EdgeField) | not }}
                    if v := i.{{pascal .Name}}GT; v != nil {
				    predicates = append(predicates, {{  lower $s.Name }}.{{ pascal .Name }}GT(*v))
                    }
                    if v := i.{{pascal .Name}}GTE; v != nil {
                        predicates = append(predicates, {{  lower $s.Name }}.{{ pascal .Name }}GTE(*v))
                    }
                    if v := i.{{pascal .Name}}LT; v != nil {
                        predicates = append(predicates, {{  lower $s.Name }}.{{ pascal .Name }}LT(*v))
                    }
                    if v := i.{{pascal .Name}}LTE; v != nil {
                        predicates = append(predicates, {{  lower $s.Name }}.{{ pascal .Name }}LTE(*v))
                    }
                {{- end }}
            {{- end }}
            {{- if .Optional}}
                if v := i.{{pascal .Name}}IsNil; v != nil && *v {
                    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}IsNil())
                }
                if v := i.{{pascal .Name}}NotNil; v != nil && *v{
                    predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}NotNil())
                }
            {{end}}
            
            {{- if .Type | eq "string" }}
				{{- if eq .Name "id" | not}}
                    if v := i.{{pascal .Name }}Contains; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}Contains(*v))
                    }
                    if v := i.{{ pascal .Name }}HasPrefix; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}HasPrefix(*v))
                    }
                    if v := i.{{ pascal .Name }}HasSuffix; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}HasSuffix(*v))
                    }
                    if v := i.{{ pascal .Name }}HasSuffix; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}HasSuffix(*v))
                    }
                    if v := i.{{ pascal .Name }}ContainsFold; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}ContainsFold(*v))
                    }
                    if v := i.{{ pascal .Name }}EqualFold; v != nil {
                        predicates = append(predicates, {{ lower $s.Name }}.{{ pascal .Name }}EqualFold(*v))
                    }
                {{- end}}
			{{- end }}
        {{ end }}

        {{ range .Edges }}
        // "{{ .Name }}" edge predicates.
        if v := i.Has{{ pascal .Name }}; v != nil && *v {
		    predicates = append(predicates, {{ lower $s.Name }}.Has{{ pascal .Name }}())
        }
        if v := i.Has{{ pascal .Name }}With; v != nil {
            p, err := v.P()
            if err == nil {
                predicates = append(predicates, {{ lower $s.Name }}.Has{{ pascal .Name }}With(p))
            }
        }
        {{ with .Through }} 
        // "{{ .N }}" edge predicates.
            if v := i.Has{{ pascal .N }}; v != nil && *v {
                predicates = append(predicates, {{ lower $s.Name }}.Has{{ pascal .N }}())
            }
            if v := i.Has{{ pascal .N }}With; v != nil {
                p, err := v.P()
                if err == nil {
                    predicates = append(predicates, {{ lower $s.Name }}.Has{{ pascal .N }}With(p))
                }
            }
        {{ end }}
        {{ end }}
        switch len(predicates) {
            case 0:
                return nil, ErrEmpty{{pascal .Name}}WhereInput
            case 1:
                return predicates[0], nil
            default:
                return {{lower .Name}}.And(predicates...), nil
        }
    }

    func (q *{{ pascal .Name }}Query) SetWhere(w *{{ pascal .Name }}WhereInput) *{{ pascal .Name }}Query {
        if w != nil {
            ps, err := w.P()
            if err == nil {
                q.Where(ps)
            }
        }
        return q
    }

    func (q *{{ pascal .Name }}Query) SetInput(i *{{ pascal .Name }}QueryInput) *{{ pascal .Name }}Query {
        if i == nil {
            return q
        }
        if i.Where != nil {
            ps, err := i.Where.P()
            if err == nil {
                q.Where(ps)
            }
        }
        if v := i.Order; len(v) > 0 {
            for _, o := range v {
                if strings.ToUpper(o.Direction) == "DESC" {
                    q.Order(Desc(o.Field))
                } else {
                    q.Order(Asc(o.Field))
                }
            }
        }
        {{- range .Edges }}
        if v := i.With{{ pascal .Name }}; v != nil {
            q.With{{ pascal .Name }}(func(nq *{{ pascal .Type }}Query){ nq.SetInput(v) })
        }
        {{ with .Through }} 
        if v := i.With{{ pascal .N }}; v != nil {
            q.With{{ pascal .N }}(func(nq *{{ pascal .T }}Query){ nq.SetInput(v) })
        }
        {{ end -}}
        {{- end}}
        if  len(i.Select) > 0 {
            q.Select(i.Select...)
        }
        if v := i.Offset; v != nil {
            q.Offset(*v)
        }
        if v := i.Limit; v != nil {
            q.Limit(*v)
        }	
        return q
    }
{{- end }}