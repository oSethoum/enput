package ent

{{ $g := . }}

{{ if or ( gt ( len .Imports ) 0 ) ( gt ( len .InputImports ) 0 )}}
import (
    {{ range .Imports -}}
    "{{ . }}"
    {{ end -}}
    {{ range .InputImports -}}
    "{{ . }}"
    {{ end }}
)
{{ end }}

{{- range .Schemas }}
    type {{ .Name }}CreateInput struct {
        {{- range .Fields }}
            {{ pascal .Name }} {{ if or .Optional .HasDefault -}}*{{- end -}}{{ .Type }} `{{ .Tag }}`
        {{- end }}
        {{- range .Edges }}
            {{ if not .EdgeField }} 
                {{- if .Unique}}
                    {{- if .OwnerFK }} 
                        {{- if .Optional }}
                            {{ pascal .Name }}ID *{{ $g.Config.IDType }} `{{ .Tags.UniqueTag }}`
                        {{- else}}
                            {{ pascal .Name }}ID {{ $g.Config.IDType }} `{{ .Tags.UniqueTag }}`
                        {{- end}}
                    {{ end -}}
                {{- else}}
                    Add{{ pascal .Name }}IDs []{{ $g.Config.IDType }} `{{ .Tags.AddIdsTag }}`
                {{- end }}
            {{ end -}}
        {{- end }}

        {{ if gt ( len .Edges) 0 }} 
        CreateEdges *{{ .Name }}CreateEdges `json:"{{case "CreateEdges"}},omitempty"`
        {{ end }}
        
    } {{ if $g.Config.WithSwaggerRename }}// @name {{ .Name }}CreateInput {{ end }}

    {{ if gt ( len .Edges) 0 }} 
    type {{ .Name }}CreateEdges struct {
        {{- range .Edges }}
            {{- if .Unique}}
                {{ pascal .Name }} *{{ pascal .Type }}CreateInput `json:"{{ case .Name }},omitempty"`
            {{- end }}
        {{- end -}}
    } {{ if $g.Config.WithSwaggerRename }}// @name {{ .Name }}CreateEdges {{ end }}
    {{ end }}

    func (i *{{ .Name }}CreateInput) Mutate(m *{{ .Name }}Mutation) {
        {{- range .Fields }}
            {{- if or .Optional .HasDefault }} 
            if v := i.{{ pascal .Name }}; v != nil {
            m.Set{{pascal .Name}}(*v)
            }
            {{- else }}
            m.Set{{pascal .Name}}(i.{{ pascal .Name }})
            {{- end }}
        {{- end }}
        {{- range .Edges }}
            {{ if not .EdgeField }} 
                {{- if .Unique }}
                    {{ if .OwnerFK }}
                        {{- if .Optional }}
                        if v := i.{{ pascal .Name }}ID; v!= nil {
                            m.Set{{pascal .Name}}ID(*v)
                        }
                        {{- else }}
                        m.Set{{pascal .Name}}ID(i.{{ pascal .Name }}ID)
                        {{- end }}
                    {{ end -}}
                {{- else }}
                    m.Add{{ singular .Name | pascal }}IDs(i.Add{{ pascal .Name }}IDs...)
                {{- end }}
            {{ end }}
        {{- end}}
    }

    func (c *{{ .Name }}Create) SetInput(i *{{ .Name }}CreateInput) *{{ .Name }}Create {
        i.Mutate(c.Mutation())
        return c
    }
    
    type {{ .Name }}UpdateInput struct {
        {{- range .Fields }}
            {{ pascal .Name }} {{ if and ( not .Slice ) ( not ( eq .Name "id" ) )  -}}*{{- end -}} {{ .Type }} `{{ .Tag }}`
        {{- end }}
        {{- range .Edges }}
            {{ if not .EdgeField }}
                {{- if .Unique}}
                    {{- if .OwnerFK }}
                        {{ pascal .Name }}ID *{{ $g.Config.IDType }} `json:"{{ case .Name }}Id,omitempty"`
                        {{- if .Optional}}
                            Clear{{ pascal .Name }} bool `json:"clear{{ pascal .Name }},omitempty"`
                        {{- end }}
                    {{ end -}}
                {{- else }}
                    {{- if .Optional }}
                        Remove{{ singular .Name | pascal }}IDs []{{ $g.Config.IDType }} `{{ .Tags.RemoveIdsTag }}`
                        Clear{{ pascal .Name }} bool `{{ .Tags.ClearTag }}`
                    {{- end }}
                    Add{{ singular .Name | pascal }}IDs []{{ $g.Config.IDType }} `{{ .Tags.AddIdsTag }}`
                {{- end}}
            {{ end -}}
        {{- end }}
        {{ if gt ( len .Edges) 0 }} 
        UpdateEdges *{{ .Name }}UpdateEdges `json:"{{case "UpdateEdges"}},omitempty"`
        {{ end }}

    } {{ if $g.Config.WithSwaggerRename }}// @name {{ .Name }}UpdateInput {{ end }}

    {{ if gt ( len .Edges) 0 }} 
    type {{ .Name }}UpdateEdges struct {
        {{- range .Edges }}
            {{- if .Unique}}
                {{ pascal .Name }} *{{ pascal .Type }}UpdateInput `json:"{{ case .Name }},omitempty"`
            {{- end }}
        {{- end -}}
    } {{ if $g.Config.WithSwaggerRename }}// @name {{ .Name }}UpdateEdges {{ end }}
    {{ end }}

    func (i *{{ .Name }}UpdateInput) Mutate(m *{{ .Name }}Mutation) {
    {{- range .Fields }}
        {{- if and ( not .Slice ) ( not ( eq .Name "id" ) )  }}
        if v := i.{{ pascal .Name }}; v != nil {
        m.Set{{pascal .Name}}(*v)
        }
        {{ else if .Slice }}
        if i.{{ pascal .Name }} != nil {
            m.Set{{pascal .Name}}(i.{{ pascal .Name }})
        }
        {{ else -}}
        m.Set{{pascal .Name}}(i.{{ pascal .Name }})
        {{- end }}
    {{- end -}}
    {{- range .Edges}}
        {{ if not .EdgeField }}
            {{- if .Unique}}
                {{- if .OwnerFK }} 
                    if v := i.{{ pascal .Name }}ID; v != nil {
                        m.Set{{ pascal .Name }}ID(*v)
                    }
                    {{- if .Optional }}
                        if i.Clear{{ pascal .Name }} {
                            m.Clear{{ pascal .Name }}()
                        }
                    {{- end }}
                {{ end }}
            {{- else }}
                {{- if .Optional }}
                    m.Remove{{ singular .Name | pascal }}IDs(i.Remove{{ singular .Name | pascal }}IDs...)
                    if i.Clear{{ pascal .Name }} {
                        m.Clear{{ pascal .Name }}()
                    }
                {{- end }}
                m.Add{{ singular .Name | pascal }}IDs(i.Add{{ singular .Name | pascal }}IDs...)
            {{- end}}
        {{ end -}}
    {{- end}}
    }

    func (u *{{ .Name }}Update) SetInput(i *{{ .Name }}UpdateInput) *{{ .Name }}Update {
        i.Mutate(u.Mutation())
        return u
    }
    
    func (uo *{{ .Name }}UpdateOne) SetInput(i *{{ .Name }}UpdateInput) *{{ .Name }}UpdateOne {
        i.Mutate(uo.Mutation())
        return uo
    }
{{- end }}