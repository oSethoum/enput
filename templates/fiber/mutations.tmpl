package handlers

{{ $ := . }}

import (
	"{{ .Config.Package }}/db"
	"{{ .Config.Package }}/ent"

	"github.com/gofiber/fiber/v2"
)

{{ range .Schemas }}


{{ if ignore_create . | not }}
{{ if $.Config.WithSwagger }}
// Create{{ pascal .Name }} godoc
//
//	@Summary	Create {{ pascal .Name }}
//	@Tags		{{ plural .Name | kebab }}
//	@Produce	json
//	@Param		input	body		{{ pascal .Name }}CreateInput	false	"Body object"
//	@Success	201		{object}    {{ pascal .Name }}CreateSuccess
//	@Failure	400		{object}	Error
//	@Failure	500		{object}	Error
//	@Router		/{{ plural .Name | kebab }}/ 		[post]
{{ end -}}
func Create{{ pascal .Name }}(c *fiber.Ctx) error {

	body := new(ent.{{ pascal .Name }}CreateInput)

	err := c.BodyParser(body)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"ok":    false,
			"error": err.Error(),
		})
	}

	entity, err := db.Client.{{ pascal .Name }}.Create().SetInput(body).Save(c.UserContext())
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"ok":    false,
			"error": err.Error(),
		})
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"ok":   true,
		"data": entity,
	})
}
{{ end -}}

{{ if ignore_update . | not }}
{{ if $.Config.WithSwagger }}
// Update{{ pascal .Name }} godoc
//
//	@Summary	Update {{ pascal .Name }}
//	@Tags		{{ plural .Name | kebab }}
//	@Produce	json
//	@Param		input	body		SignUpInput	false	"Body object"
//	@Param		id		path		string		false	"{{ pascal .Name }} ID"
//	@Success	200		{object}    {{ pascal .Name }}UpdateSuccess
//	@Failure	400		{object}	Error
//	@Failure	500		{object}	Error
//	@Router		/{{ plural .Name | kebab }}/:id [patch]
{{ end -}}
func Update{{ pascal .Name }}(c *fiber.Ctx) error {

	body := new(ent.{{ pascal .Name }}UpdateInput)
	id := c.Params("id")

	err := c.BodyParser(body)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"ok":    false,
			"error": err.Error(),
		})
	}

	entity, err := db.Client.{{ pascal .Name }}.UpdateOneID(id).SetInput(body).Save(c.UserContext())
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"ok":    false,
			"error": err.Error(),
		})
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"ok":   true,
		"data": entity,
	})
}
{{ end -}}

{{ if ignore_delete . | not  }}
{{ if $.Config.WithSwagger }}
// Delete{{ pascal .Name }} godoc
//
//	@Summary	Delete {{ pascal .Name }}
//	@Tags		{{ plural .Name | kebab }}
//	@Produce	json
//	@Param		id	    path		string	   false	"{{ pascal .Name }} ID"
//	@Success	200		{object}    Success
//	@Failure	400		{object}	Error
//	@Failure	500		{object}	Error
//	@Router		/{{ plural .Name | kebab }}/:id 	[delete]
{{ end -}}
func Delete{{ pascal .Name }}(c *fiber.Ctx) error {

	id := c.Params("id")

	err := db.Client.{{ pascal .Name }}.DeleteOneID(id).Exec(c.UserContext())

	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"ok":    false,
			"error": err.Error(),
		})
	}

	return c.JSON(fiber.Map{
		"ok": true,
	})
}
{{ end -}}
{{ end -}}